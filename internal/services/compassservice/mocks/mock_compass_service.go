// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/motain/of-catalog/internal/services/compassservice (interfaces: CompassServiceInterface)

// Package compassservice is a generated GoMock package.
package compassservice

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	compassservice "github.com/motain/of-catalog/internal/services/compassservice"
	dtos "github.com/motain/of-catalog/internal/services/compassservice/dtos"
)

// MockCompassServiceInterface is a mock of CompassServiceInterface interface.
type MockCompassServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCompassServiceInterfaceMockRecorder
}

// MockCompassServiceInterfaceMockRecorder is the mock recorder for MockCompassServiceInterface.
type MockCompassServiceInterfaceMockRecorder struct {
	mock *MockCompassServiceInterface
}

// NewMockCompassServiceInterface creates a new mock instance.
func NewMockCompassServiceInterface(ctrl *gomock.Controller) *MockCompassServiceInterface {
	mock := &MockCompassServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCompassServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompassServiceInterface) EXPECT() *MockCompassServiceInterfaceMockRecorder {
	return m.recorder
}

// GetCompassCloudId mocks base method.
func (m *MockCompassServiceInterface) GetCompassCloudId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompassCloudId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCompassCloudId indicates an expected call of GetCompassCloudId.
func (mr *MockCompassServiceInterfaceMockRecorder) GetCompassCloudId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompassCloudId", reflect.TypeOf((*MockCompassServiceInterface)(nil).GetCompassCloudId))
}

// Run mocks base method.
func (m *MockCompassServiceInterface) Run(arg0 context.Context, arg1 string, arg2 map[string]interface{}, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCompassServiceInterfaceMockRecorder) Run(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCompassServiceInterface)(nil).Run), arg0, arg1, arg2, arg3)
}

// RunWithDTOs mocks base method.
func (m *MockCompassServiceInterface) RunWithDTOs(arg0 context.Context, arg1 compassservice.InputDTOInterface, arg2 compassservice.OutputDTOInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithDTOs", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithDTOs indicates an expected call of RunWithDTOs.
func (mr *MockCompassServiceInterfaceMockRecorder) RunWithDTOs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithDTOs", reflect.TypeOf((*MockCompassServiceInterface)(nil).RunWithDTOs), arg0, arg1, arg2)
}

// SendAPISpecifications mocks base method.
func (m *MockCompassServiceInterface) SendAPISpecifications(arg0 context.Context, arg1 dtos.APISpecificationsInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAPISpecifications", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAPISpecifications indicates an expected call of SendAPISpecifications.
func (mr *MockCompassServiceInterfaceMockRecorder) SendAPISpecifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAPISpecifications", reflect.TypeOf((*MockCompassServiceInterface)(nil).SendAPISpecifications), arg0, arg1)
}

// SendMetric mocks base method.
func (m *MockCompassServiceInterface) SendMetric(arg0 context.Context, arg1 map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetric", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMetric indicates an expected call of SendMetric.
func (mr *MockCompassServiceInterfaceMockRecorder) SendMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetric", reflect.TypeOf((*MockCompassServiceInterface)(nil).SendMetric), arg0, arg1)
}
