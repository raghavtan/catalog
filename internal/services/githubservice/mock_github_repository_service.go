// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/motain/fact-collector/internal/services/githubservice (interfaces: GitHubRepositoriesServiceInterface)

// Package githubservice is a generated GoMock package.
package githubservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v58/github"
)

// MockGitHubRepositoriesServiceInterface is a mock of GitHubRepositoriesServiceInterface interface.
type MockGitHubRepositoriesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubRepositoriesServiceInterfaceMockRecorder
}

// MockGitHubRepositoriesServiceInterfaceMockRecorder is the mock recorder for MockGitHubRepositoriesServiceInterface.
type MockGitHubRepositoriesServiceInterfaceMockRecorder struct {
	mock *MockGitHubRepositoriesServiceInterface
}

// NewMockGitHubRepositoriesServiceInterface creates a new mock instance.
func NewMockGitHubRepositoriesServiceInterface(ctrl *gomock.Controller) *MockGitHubRepositoriesServiceInterface {
	mock := &MockGitHubRepositoriesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGitHubRepositoriesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubRepositoriesServiceInterface) EXPECT() *MockGitHubRepositoriesServiceInterfaceMockRecorder {
	return m.recorder
}

// GetFileContent mocks base method.
func (m *MockGitHubRepositoriesServiceInterface) GetFileContent(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContent", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileContent indicates an expected call of GetFileContent.
func (mr *MockGitHubRepositoriesServiceInterfaceMockRecorder) GetFileContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContent", reflect.TypeOf((*MockGitHubRepositoriesServiceInterface)(nil).GetFileContent), arg0, arg1)
}

// GetFileExists mocks base method.
func (m *MockGitHubRepositoriesServiceInterface) GetFileExists(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileExists indicates an expected call of GetFileExists.
func (mr *MockGitHubRepositoriesServiceInterfaceMockRecorder) GetFileExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileExists", reflect.TypeOf((*MockGitHubRepositoriesServiceInterface)(nil).GetFileExists), arg0, arg1)
}

// GetRepo mocks base method.
func (m *MockGitHubRepositoriesServiceInterface) GetRepo(arg0 string) (*github.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", arg0)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockGitHubRepositoriesServiceInterfaceMockRecorder) GetRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockGitHubRepositoriesServiceInterface)(nil).GetRepo), arg0)
}

// GetRepoProperties mocks base method.
func (m *MockGitHubRepositoriesServiceInterface) GetRepoProperties(arg0 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoProperties", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoProperties indicates an expected call of GetRepoProperties.
func (mr *MockGitHubRepositoriesServiceInterfaceMockRecorder) GetRepoProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoProperties", reflect.TypeOf((*MockGitHubRepositoriesServiceInterface)(nil).GetRepoProperties), arg0)
}
