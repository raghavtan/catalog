// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/motain/of-catalog/internal/services/githubservice (interfaces: GitHubRepositoriesInterface)

// Package githubservice is a generated GoMock package.
package githubservice

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v58/github"
)

// MockGitHubRepositoriesInterface is a mock of GitHubRepositoriesInterface interface.
type MockGitHubRepositoriesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubRepositoriesInterfaceMockRecorder
}

// MockGitHubRepositoriesInterfaceMockRecorder is the mock recorder for MockGitHubRepositoriesInterface.
type MockGitHubRepositoriesInterfaceMockRecorder struct {
	mock *MockGitHubRepositoriesInterface
}

// NewMockGitHubRepositoriesInterface creates a new mock instance.
func NewMockGitHubRepositoriesInterface(ctrl *gomock.Controller) *MockGitHubRepositoriesInterface {
	mock := &MockGitHubRepositoriesInterface{ctrl: ctrl}
	mock.recorder = &MockGitHubRepositoriesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubRepositoriesInterface) EXPECT() *MockGitHubRepositoriesInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGitHubRepositoriesInterface) Get(arg0 context.Context, arg1, arg2 string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockGitHubRepositoriesInterfaceMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGitHubRepositoriesInterface)(nil).Get), arg0, arg1, arg2)
}

// GetContents mocks base method.
func (m *MockGitHubRepositoriesInterface) GetContents(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContents", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepositoryContent)
	ret1, _ := ret[1].([]*github.RepositoryContent)
	ret2, _ := ret[2].(*github.Response)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetContents indicates an expected call of GetContents.
func (mr *MockGitHubRepositoriesInterfaceMockRecorder) GetContents(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContents", reflect.TypeOf((*MockGitHubRepositoriesInterface)(nil).GetContents), arg0, arg1, arg2, arg3, arg4)
}
