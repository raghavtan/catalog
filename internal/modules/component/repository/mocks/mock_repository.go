// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/motain/of-catalog/internal/modules/component/repository (interfaces: RepositoryInterface)

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	resources "github.com/motain/of-catalog/internal/modules/component/resources"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddDocument mocks base method.
func (m *MockRepositoryInterface) AddDocument(arg0 context.Context, arg1 resources.Component, arg2 resources.Document) (resources.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDocument", arg0, arg1, arg2)
	ret0, _ := ret[0].(resources.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDocument indicates an expected call of AddDocument.
func (mr *MockRepositoryInterfaceMockRecorder) AddDocument(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDocument", reflect.TypeOf((*MockRepositoryInterface)(nil).AddDocument), arg0, arg1, arg2)
}

// BindMetric mocks base method.
func (m *MockRepositoryInterface) BindMetric(arg0 context.Context, arg1 resources.Component, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindMetric", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindMetric indicates an expected call of BindMetric.
func (mr *MockRepositoryInterfaceMockRecorder) BindMetric(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindMetric", reflect.TypeOf((*MockRepositoryInterface)(nil).BindMetric), arg0, arg1, arg2, arg3)
}

// Create mocks base method.
func (m *MockRepositoryInterface) Create(arg0 context.Context, arg1 resources.Component) (resources.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(resources.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepositoryInterface)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRepositoryInterface) Delete(arg0 context.Context, arg1 resources.Component) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepositoryInterface)(nil).Delete), arg0, arg1)
}

// GetBySlug mocks base method.
func (m *MockRepositoryInterface) GetBySlug(arg0 context.Context, arg1 resources.Component) (*resources.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlug", arg0, arg1)
	ret0, _ := ret[0].(*resources.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlug indicates an expected call of GetBySlug.
func (mr *MockRepositoryInterfaceMockRecorder) GetBySlug(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockRepositoryInterface)(nil).GetBySlug), arg0, arg1)
}

// Push mocks base method.
func (m *MockRepositoryInterface) Push(arg0 context.Context, arg1 resources.MetricSource, arg2 float64, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockRepositoryInterfaceMockRecorder) Push(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockRepositoryInterface)(nil).Push), arg0, arg1, arg2, arg3)
}

// RemoveDocument mocks base method.
func (m *MockRepositoryInterface) RemoveDocument(arg0 context.Context, arg1 resources.Component, arg2 resources.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDocument", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDocument indicates an expected call of RemoveDocument.
func (mr *MockRepositoryInterfaceMockRecorder) RemoveDocument(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDocument", reflect.TypeOf((*MockRepositoryInterface)(nil).RemoveDocument), arg0, arg1, arg2)
}

// SetAPISpecifications mocks base method.
func (m *MockRepositoryInterface) SetAPISpecifications(arg0 context.Context, arg1 resources.Component, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAPISpecifications", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAPISpecifications indicates an expected call of SetAPISpecifications.
func (mr *MockRepositoryInterfaceMockRecorder) SetAPISpecifications(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPISpecifications", reflect.TypeOf((*MockRepositoryInterface)(nil).SetAPISpecifications), arg0, arg1, arg2, arg3)
}

// SetDependency mocks base method.
func (m *MockRepositoryInterface) SetDependency(arg0 context.Context, arg1, arg2 resources.Component) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDependency", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDependency indicates an expected call of SetDependency.
func (mr *MockRepositoryInterfaceMockRecorder) SetDependency(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDependency", reflect.TypeOf((*MockRepositoryInterface)(nil).SetDependency), arg0, arg1, arg2)
}

// UnbindMetric mocks base method.
func (m *MockRepositoryInterface) UnbindMetric(arg0 context.Context, arg1 resources.MetricSource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindMetric indicates an expected call of UnbindMetric.
func (mr *MockRepositoryInterfaceMockRecorder) UnbindMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindMetric", reflect.TypeOf((*MockRepositoryInterface)(nil).UnbindMetric), arg0, arg1)
}

// UnsetDependency mocks base method.
func (m *MockRepositoryInterface) UnsetDependency(arg0 context.Context, arg1, arg2 resources.Component) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetDependency", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetDependency indicates an expected call of UnsetDependency.
func (mr *MockRepositoryInterfaceMockRecorder) UnsetDependency(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetDependency", reflect.TypeOf((*MockRepositoryInterface)(nil).UnsetDependency), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockRepositoryInterface) Update(arg0 context.Context, arg1 resources.Component) (resources.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(resources.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryInterfaceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepositoryInterface)(nil).Update), arg0, arg1)
}

// UpdateDocument mocks base method.
func (m *MockRepositoryInterface) UpdateDocument(arg0 context.Context, arg1 resources.Component, arg2 resources.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocument", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDocument indicates an expected call of UpdateDocument.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateDocument(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocument", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateDocument), arg0, arg1, arg2)
}
